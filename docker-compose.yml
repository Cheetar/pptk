version: '3.6'

networks:
  default:
    driver: bridge

volumes:
  pgmaster:
  pgslave1:
  pgslave2:

services:
  kafka:
    image: spotify/kafka
    ports:
      - 2181:2181
      - 9092:9092
    environment:
      - ADVERTISED_PORT=9092
      - ADVERTISED_HOST=${DOCKER_HOST_IP}  # For accessing kafka queue from localhost
    restart: always
    deploy:
      replicas: 1
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M


  front:
    build:
      context: ./front
    image: front:0.0.1
    restart: always
    depends_on:
      - "slides"
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://front:8000"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ports:
      - "80:8000"
    environment:
      - FLASK_DEBUG=${FLASK_DEBUG}
      - AWS_REGION=${AWS_REGION}
      - BUCKET_NAME=${BUCKET_NAME}
      - GA_TRACKING_CODE=${GA_TRACKING_CODE}
      - SENTRY_DNS=${SENTRY_DNS}

  verifier:
    build:
      context: ./verifier
    image: verifier:0.0.1
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://verifier:8000/api/v1/verify?image=https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    environment:
      - FLASK_DEBUG=${FLASK_DEBUG}
      - SENTRY_DNS=${SENTRY_DNS}


  slides:
    build:
      context: ./slides
    image: slides:0.0.1
    depends_on:
      - "pgpool"
    environment:
      # Values in the sqlalchemy string are: postgresql://user:password@hostname/database_name
      - SQLALCHEMY_DATABASE_URI=postgresql://postgres:${DB_PASSWORD}@pgpool/pptk
      - AWS_REGION=${AWS_REGION}
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://slides:8000/api/v1/slides/random/3"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    environment:
      - FLASK_DEBUG=${FLASK_DEBUG}
      - SQLALCHEMY_TRACK_MODIFICATIONS=${SQLALCHEMY_TRACK_MODIFICATIONS}
      - Access_Key_ID=${Access_Key_ID}
      - Secret_Access_Key=${Secret_Access_Key}
      - BUCKET_NAME=${BUCKET_NAME}
      - SENTRY_DNS=${SENTRY_DNS}


  admin:
    build:
      context: ./admin
    image: admin:0.0.1
    depends_on:
      - "spider"
      - "kafka"
    environment:
      - BASIC_AUTH_USERNAME=${ADMIN_USERNAME}
      - BASIC_AUTH_PASSWORD=${ADMIN_PASSWORD}
      - FLASK_DEBUG=${FLASK_DEBUG}
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DNS=${SENTRY_DNS}
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://${ADMIN_USERNAME}:${ADMIN_PASSWORD}@admin:8000"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    ports:
      - "8080:8000"


  spider:
    build:
      context: ./spider
    image: spider:0.0.1
    depends_on:
      - "verifier"
      - "slides"
      - "kafka"
    deploy:
      replicas: 3
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
        window: 30s
      resources:
        reservations:
          cpus: '0.01'
          memory: 10M
    restart: always

# Postgres cluster below
  pgmaster:
    build:
      context: postgres_cluster
      dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
    environment:
      NODE_ID: 1
      NODE_NAME: node1
      CLUSTER_NODE_NETWORK_NAME: pgmaster

      PARTNER_NODES: "pgmaster,pgslave1,pgslave2"
      REPLICATION_PRIMARY_HOST: pgmaster

      POSTGRES_DB: pptk
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}

      CLEAN_OVER_REWIND: 0
      CONFIGS: "listen_addresses:'*',max_replication_slots:5"

      CLUSTER_NAME: pg_cluster
      REPLICATION_DB: replication_db
      REPLICATION_USER: replication_user
      REPLICATION_PASSWORD: replication_pass

    volumes:
      - pgmaster:/var/lib/postgresql/data
      - ./ssh/:/tmp/.ssh/keys
    networks:
      default:
        aliases:
          - pgmaster

  pgslave1:
    build:
      context: postgres_cluster
      dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
    environment:
      NODE_ID: 2
      NODE_NAME: node2
      CLUSTER_NODE_NETWORK_NAME: pgslave1

      PARTNER_NODES: "pgmaster,pgslave1,pgslave2"
      REPLICATION_PRIMARY_HOST: pgmaster

      CLEAN_OVER_REWIND: 1
      CONFIGS: "max_replication_slots:10"
    restart: always
    volumes:
      - pgslave1:/var/lib/postgresql/data
      - ./ssh:/tmp/.ssh/keys
    networks:
      default:
        aliases:
          - pgslave1

  pgslave2:
    build:
      context: postgres_cluster
      dockerfile: Postgres-11-Repmgr-4.0.Dockerfile
    environment:
      NODE_ID: 3
      NODE_NAME: node3
      CLUSTER_NODE_NETWORK_NAME: pgslave2

      PARTNER_NODES: "pgmaster,pgslave1,pgslave2"
      REPLICATION_PRIMARY_HOST: pgmaster

      CLEAN_OVER_REWIND: 1
      CONFIGS: "max_replication_slots:10"
    restart: always
    volumes:
      - pgslave2:/var/lib/postgresql/data
      - ./ssh:/tmp/.ssh/keys
    networks:
      default:
        aliases:
          - pgslave2

  pgpool:
    build:
      context: postgres_cluster
      dockerfile: Pgpool-3.7-Postgres-11.Dockerfile
    environment:
      PCP_USER: pcp_user
      PCP_PASSWORD: pcp_pass
      WAIT_BACKEND_TIMEOUT: 60

      CHECK_USER: postgres
      CHECK_PASSWORD: ${DB_PASSWORD}
      CHECK_PGCONNECT_TIMEOUT: 3
      DB_USERS: postgres:${DB_PASSWORD}

      BACKENDS: "0:pgmaster::::,1:pgslave1::::,2:pgslave2::::"
      REQUIRE_MIN_BACKENDS: 2
      CONFIGS: "num_init_children:100,max_pool:4"
    restart: always
    volumes:
      - ./ssh:/tmp/.ssh/keys
    networks:
      default:
        aliases:
          - pgpool
